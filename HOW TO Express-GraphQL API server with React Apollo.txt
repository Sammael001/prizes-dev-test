

HOW TO: Express-GraphQL API server with React Apollo front-end

    (I) DURING DEVELOPMENT:

1) set up server.js in root project directory 
 -- create server.js file
 -- npm init
 -- RUN > npm i express graphql express-graphql nodemon concurrently cors
 -- in server.js, const PORT = process.env.PORT || 5000;
 -- in server.js, require in cors and set app.use(cors()); <-- this only applies during development!!

2) in root project directory, RUN> npx create-react-app client (creates a client folder with react app template in it)

3) git init, touch .gitignore

4) add "client" and "node_modules" to gitignore (when ready to deploy, we will build our react app into a /public folder which our server will serve)

5) in ROOT package.json, add the following scripts: 

    "start": "node server.js",
    "server": "nodemon server.js",
    "client": "npm start --prefix client", <-- if executed from root dir, will navigate to /client and run npm start
    "dev": "concurrently \"npm run server\" \"npm run client\"" <-- \" is an escape char that allows quotes

^^ this allows us to launch both servers when we go to the root project dir and RUN> npm run dev

6) in /client dir, RUN> npm install @apollo/client

7) in /client/App.js component file, import needful modules (ApolloClient, InMemoryCache, ApolloProvider,) from @apollo/client

8) in /client/App.js component file, create new client, pass in URL of server and create cache:

  const client = new ApolloClient({
    uri: "http://localhost:5000/graphql",   <-- URL of our server (DURING DEVELOPMENT)
    cache: new InMemoryCache()
  });

9) wrap tags around your app's child components, pass in the client you created: 
  function App() {
    <ApolloProvider client={client}>
      <ChildComponent />
      <AlsoChildComponent />
    <ApolloProvider />
  }

10) in child components, import gql and useQuery from @apollo/client 

11) construct queries with gql``;

12) call useQuery, pass in query defined in (13), receive {error, loading, data}



    (II) BUILDING FOR DEPLOYMENT:

* We will compile our React app into a public folder which our Express server will serve up 

1) in /client/src/App.js, change the ApolloClient's uri to "/graphql"
  const client = new ApolloClient({
    uri: "/graphql",
    cache: new InMemoryCache()
  });

2) Added proxy to /client/package.json (this allows your app to run in development again): 
  "proxy": "http://localhost:5000"

3) inside server.js:
  -- require in path module
  -- tell our server to serve up files inside the public folder:
      app.use(express.static("public"));
  -- add an app.get("*") route, so that any hits to endpoints aside from "/graphql", will be served the index.html file (our React app homepage) in the public folder:
      app.get("*", (req, res) => {
        res.sendFile(path.resolve(__dirname, "public",  "index.html"));
      });

4) currently in /client/package.json we have the following build script:
    "scripts": {
      "build": "react-scripts build",
    }
 ... this will build our React app into the /client dir, but we want the build to go into a /public folder into the root dir. So we change the build script like so...
     "scripts": {
      "build": "react-scripts build && mv build ../public",
    }

5) then we CHANGE INTO CLIENT DIR and RUN> npm run build

............................................................

   (III) DEPLOYING TO HEROKU

https://devcenter.heroku.com/articles/deploying-nodejs
https://devcenter.heroku.com/articles/preparing-a-codebase-for-heroku-deployment

REMEMBER: Just login to heroku CLI once. You can run "heroku create" from the regular bash terminal prompt after running "heroku login" at least once.

1) make sure you've initialized a git repo

2) add the following to package.json:
    "engines": {
      "node": "14.16.1" <-- your version of node goes here
    }

3) make sure you have a start script in your package.json file!
		"scripts": {
	    "start": "node app.js" <-- or whatever your server file is named
	  },

4) be sure your PORT in app.js is setup as shown:
    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
      console.log(`Server running on port ${PORT}`);
    });

5) create "Procfile" (NOT procfile or procfile.txt, just Procfile) in home directory of app and add this:
    web: node app.js <-- or whatever your server file is named

6) push changes to github

7) RUN> heroku login
    -- exit back to git command prompt if the terminal does not auto-exit

8) RUN> heroku create
    -- this generates a Heroku repo for you. EX: https://git.heroku.com/limitless-lowlands-81996.git

9) RUN> git push heroku HEAD:master

... And you are done! After pushing, you will be given the URL of your site:  https://limitless-lowlands-81996.herokuapp.com/ |


10) After updates to the app, to re-deploy changes to heroku:
    RUN> git push -f heroku

** refer to this guide to provide your app with its env variables on Heroku: https://devcenter.heroku.com/articles/config-vars#using-the-heroku-dashboard
** don't forget to remove your .env file from the repo before hosting!